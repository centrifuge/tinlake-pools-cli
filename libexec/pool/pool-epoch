#!/usr/bin/env node
/// pool-epoch -- check epoch status and close epochs
/// Usage: pool epoch
///    or: pool epoch close
///    or: pool epoch close <pool id>
///    or: pool epoch execute <pool id>

const fs = require('fs')
const execSync = require('child_process').execSync
const fetch = require('node-fetch')
const multicall = require('@makerdao/multicall')
const BigNumber = require('bignumber.js')
const registryAddr = process.env['POOL_REGISTRY_ADDRESS']

let config = {
  multicallAddress: process.env['MULTICALL_ADDR'],
  rpcUrl: process.env['ETH_RPC_URL']
}

let poolConfig = JSON.parse(execSync('pool data').toString())
let pools = Object.keys(poolConfig).reduce((l, p) => {
  p = poolConfig[p]
  if (p.version < 3 || !p.addresses || !p.addresses.ROOT_CONTRACT) return l
  let addr = p.addresses

  let data = {
      name: p.metadata.name,
      root: addr.ROOT_CONTRACT,
      juniorTranche: addr.JUNIOR_TRANCHE,
      seniorTranche: addr.SENIOR_TRANCHE,
      coordinator: addr.COORDINATOR,
  }
  l[data.root] = data
  return l
}, {})


// TODO: move these to a helber lib
let printInYellow = (txt) => { return `\x1b[33m${txt}\x1b[0m` }

let weiToDecimal = (num) => { return num.div(new BigNumber('1000000000000000000')) }

let rayToDecimal = (num) => { return num.div(new BigNumber('1000000000000000000000000000')) }


let formatWeiNum = (num) => {
  return formatNum(weiToDecimal(num))}

let formatNum = (num, decimals) => {
  decimals = decimals ? decimals : 2
  return num.toFormat(decimals, {
    decimalSeparator: '.',
    groupSeparator: ',',
    groupSize: 3,})
}

let calls = []
Object.values(pools).forEach(p => {
    calls.push({
      target: p.juniorTranche,
      call: ['totalSupply()(uint)'],
      returns: [[`${p.root}-juniorSupply`]]
    })
    calls.push({
      target: p.juniorTranche,
      call: ['totalRedeem()(uint)'],
      returns: [[`${p.root}-juniorRedeem`]]
    })
    calls.push({
      target: p.seniorTranche,
      call: ['totalSupply()(uint)'],
      returns: [[`${p.root}-seniorSupply`]]
    })
    calls.push({
      target: p.seniorTranche,
      call: ['totalRedeem()(uint)'],
      returns: [[`${p.root}-seniorRedeem`]]
    })
    calls.push({
      target: p.coordinator,
      call: ['lastEpochClosed()(uint)'],
      returns: [[`${p.root}-lastEpochClosed`]]
    })
    calls.push({
      target: p.coordinator,
      call: ['minimumEpochTime()(uint)'],
      returns: [[`${p.root}-minimumEpochTime`]]
    })
    calls.push({
      target: p.coordinator,
      call: ['submissionPeriod()(bool)'],
      returns: [[`${p.root}-submissionPeriod`]]
    })
    calls.push({
      target: p.coordinator,
      call: ['minChallengePeriodEnd()(uint)'],
      returns: [[`${p.root}-minChallengePeriodEnd`]]
    })
    calls.push({
      call: ['getCurrentBlockTimestamp()(uint256)'],
      returns: [[`${p.root}-timestamp`]]
    })
})

function poolNeedsClose(pool) {
  return pool.seniorRedeem.plus(pool.seniorSupply)
         .plus(pool.juniorRedeem)
         .plus(pool.juniorSupply)
         .gt(new BigNumber('4'))
}

function poolReadyForClose(pool) {
  return pool.timestamp.gt(pool.lastEpochClosed.plus(pool.minimumEpochTime)) && pool.submissionPeriod == false
}

function poolReadyForExecute(pool) {
  return pool.timestamp.gt(pool.minChallengePeriodEnd) && pool.minChallengePeriodEnd.gt(new BigNumber('0'))
}


const watcher = multicall.createWatcher(calls, config);

function printEpochStatus(pool) {
    console.log(`${pool.name} (${pool.root})`)
    if (pool.juniorSupply > 0 || pool.juniorRedeem > 0) {
      console.log(`Junior Supply: ${formatWeiNum(pool.juniorSupply)} Redeem: ${formatWeiNum(pool.juniorRedeem)}`)
    }

    if (pool.seniorSupply > 0 || pool.seniorRedeem > 0) {
      console.log(`Senior Supply: ${formatWeiNum(pool.seniorSupply)} Redeem: ${formatWeiNum(pool.seniorRedeem)}`)
    }
    let readyClose = poolReadyForClose(pool) ? printInYellow("close") : ""
    let submissionPeriod = pool.submissionPeriod ? printInYellow("submission") : ""
    let readyExecute = poolReadyForExecute(pool) ? printInYellow("execute") : ""
    console.log(`Ready: ${readyClose} ${readyExecute} ${submissionPeriod}`)
}

function closeEpoch(pool) {
  execSync(`ETH_GAS=11000000 seth send ${pool.coordinator} 'closeEpoch()'`, {stdio: 'inherit'})
}

function executeEpoch(pool) {
  execSync(`ETH_GAS=400000 seth send ${pool.coordinator} 'executeEpoch()'`, {stdio: 'inherit'})
}


function withPoolData(fn) {
  watcher.subscribe(update => {
    let event = update.type.split('-')
    let value = new BigNumber(update.value.toString())
    if(event[1] == 'submissionPeriod') value = update.value

    pools[event[0]][event[1]] = value;
  })

  watcher.start().then(function () {
    fn(pools)
    process.exit()
  }).catch(err => {
    console.error(err)
    process.exit(1)
  })
}


function forEachPool(fn) {
  withPoolData((pools) => {
    Object.values(pools).filter(poolNeedsClose).forEach(fn)
  })
}

if (process.argv[2] == 'close') {
  if (process.argv.length == 3) {
    forEachPool((pool) => {
      console.log(`Closing epoch for ${pool.name}`)
      closeEpoch(pool, true)
    })
  } else {
    withPoolData((pools) => {
      let pool = pools[process.argv[3]]
      if (!poolNeedsClose(pool) || !poolReadyForClose(pool)) {
        console.error("Pool not ready for close or does not need close")
        process.exit(1)
      }
      closeEpoch(pool)
    })
  }
} else if (process.argv[2] == 'execute') {
  if (process.argv.length == 3) {
    console.error("Invalid usage of pool epoch")
    execSync(`pool help epoch`,    {stdio: 'inherit'})
    process.exit(1)
  } else {
    withPoolData((pools) => {
      let pool = pools[process.argv[3]]
      if (!poolReadyForExecute(pool)) {
        console.error("Pool not ready for execute")
        process.exit(1)
      }
      executeEpoch(pool)
    })
  }
} else if (process.argv.length == 2) {
  forEachPool(printEpochStatus)
} else {
  console.error("Invalid usage of pool epoch")
  execSync(`pool help epoch`,    {stdio: 'inherit'})
  process.exit(1)
}


