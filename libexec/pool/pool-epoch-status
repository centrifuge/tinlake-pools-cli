#!/usr/bin/env node
/// pool-epoch-status -- upload and pin file using Pinata
/// Usage: pool epoch-status

const fs = require('fs')
const execSync = require('child_process').execSync
const fetch = require('node-fetch')
const multicall = require('@makerdao/multicall')
const BigNumber = require('bignumber.js')
const registryAddr = process.env['POOL_REGISTRY_ADDRESS']
const poolConfig = require(process.env['POOL_BASE_DIR']+'/out/index.js')

let pools = poolConfig.reduce((l, p) => {
  if (p.version < 3) return l
  let addr = p.addresses

  let data = {
      name: p.metadata.name,
      root: addr.ROOT_CONTRACT,
      juniorTranche: addr.JUNIOR_TRANCHE,
      seniorTranche: addr.SENIOR_TRANCHE,
  }
  l[data.root] = data
  return l
}, {})

let calls = []
Object.values(pools).forEach(p => {
    calls.push({
      target: p.juniorTranche,
      call: ['totalSupply()(uint)'],
      returns: [[`${p.root}-juniorSupply`, val => val ]]
    })
    calls.push({
      target: p.juniorTranche,
      call: ['totalRedeem()(uint)'],
      returns: [[`${p.root}-juniorRedeem`, val => val ]]
    })
    calls.push({
      target: p.seniorTranche,
      call: ['totalSupply()(uint)'],
      returns: [[`${p.root}-seniorSupply`, val => val ]]
    })
    calls.push({
      target: p.seniorTranche,
      call: ['totalRedeem()(uint)'],
      returns: [[`${p.root}-seniorRedeem`, val => val ]]
    })
})


let config = {
  multicallAddress: "0xeefba1e63905ef1d7acba5a8513c70307c1ce441",
  rpcUrl: process.env['ETH_RPC_URL']
}

const watcher = multicall.createWatcher(calls, config);

let formatNum = (num) => {
  return new BigNumber(num.toString()).toFormat(2,{
    decimalSeparator: '.',
    groupSeparator: ',',
    groupSize: 3,})
}

let printPoolDetails = (pool) => {
  console.log(`${pool.name} (${pool.root})`)
  console.log(`    Junior:  Supply: ${formatNum(pool.juniorSupply)} Redeem: ${formatNum(pool.juniorRedeem)}`)
  console.log(`    Senior:  Supply: ${formatNum(pool.seniorSupply)} Redeem: ${formatNum(pool.seniorRedeem)}`)
}

watcher.subscribe(update => {
  let event = update.type.split('-')
  pools[event[0]][event[1]] = update.value
});


watcher.start().then(function () {
  Object.values(pools).forEach(printPoolDetails)
  process.exit()
}).catch(err => {
  console.error(err)
  process.exit(1)
})

